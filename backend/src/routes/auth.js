const express = require('express');\nconst { body, validationResult } = require('express-validator');\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\nconst User = require('../models/User');\nconst auth = require('../middleware/auth');\n\nconst router = express.Router();\n\n// Generate JWT Token\nconst generateToken = (userId) => {\n  return jwt.sign(\n    { userId },\n    process.env.JWT_SECRET || 'your-secret-key',\n    { expiresIn: '7d' }\n  );\n};\n\n// @route   POST /api/auth/register\n// @desc    Register a new user\n// @access  Public\nrouter.post('/register', [\n  body('firstName').trim().isLength({ min: 2, max: 50 }).withMessage('First name must be between 2 and 50 characters'),\n  body('lastName').trim().isLength({ min: 2, max: 50 }).withMessage('Last name must be between 2 and 50 characters'),\n  body('email').isEmail().normalizeEmail().withMessage('Please provide a valid email'),\n  body('password').isLength({ min: 8 }).withMessage('Password must be at least 8 characters long'),\n  body('phone').matches(/^\\+?[\\d\\s\\-\\(\\)]+$/).withMessage('Please provide a valid phone number'),\n  body('company').optional().trim().isLength({ max: 100 }).withMessage('Company name cannot exceed 100 characters')\n], async (req, res) => {\n  try {\n    // Check for validation errors\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        errors: errors.array()\n      });\n    }\n\n    const { firstName, lastName, email, password, phone, company } = req.body;\n\n    // Check if user already exists\n    const existingUser = await User.findOne({ email });\n    if (existingUser) {\n      return res.status(400).json({\n        success: false,\n        message: 'User with this email already exists'\n      });\n    }\n\n    // Create new user\n    const user = new User({\n      firstName,\n      lastName,\n      email,\n      password,\n      phone,\n      company\n    });\n\n    await user.save();\n\n    // Generate token\n    const token = generateToken(user._id);\n\n    // Update last login\n    user.lastLogin = new Date();\n    await user.save();\n\n    res.status(201).json({\n      success: true,\n      message: 'User registered successfully',\n      data: {\n        user: user.getPublicProfile(),\n        token\n      }\n    });\n\n  } catch (error) {\n    console.error('Registration error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Server error during registration'\n    });\n  }\n});\n\n// @route   POST /api/auth/login\n// @desc    Authenticate user & get token\n// @access  Public\nrouter.post('/login', [\n  body('email').isEmail().normalizeEmail().withMessage('Please provide a valid email'),\n  body('password').notEmpty().withMessage('Password is required')\n], async (req, res) => {\n  try {\n    // Check for validation errors\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        errors: errors.array()\n      });\n    }\n\n    const { email, password } = req.body;\n\n    // Check if user exists\n    const user = await User.findOne({ email }).select('+password');\n    if (!user) {\n      return res.status(401).json({\n        success: false,\n        message: 'Invalid credentials'\n      });\n    }\n\n    // Check if user is active\n    if (!user.isActive) {\n      return res.status(401).json({\n        success: false,\n        message: 'Account is deactivated. Please contact support.'\n      });\n    }\n\n    // Check password\n    const isMatch = await user.comparePassword(password);\n    if (!isMatch) {\n      return res.status(401).json({\n        success: false,\n        message: 'Invalid credentials'\n      });\n    }\n\n    // Generate token\n    const token = generateToken(user._id);\n\n    // Update last login\n    user.lastLogin = new Date();\n    await user.save();\n\n    res.json({\n      success: true,\n      message: 'Login successful',\n      data: {\n        user: user.getPublicProfile(),\n        token\n      }\n    });\n\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Server error during login'\n    });\n  }\n});\n\n// @route   GET /api/auth/me\n// @desc    Get current user profile\n// @access  Private\nrouter.get('/me', auth, async (req, res) => {\n  try {\n    const user = await User.findById(req.user.userId);\n    if (!user) {\n      return res.status(404).json({\n        success: false,\n        message: 'User not found'\n      });\n    }\n\n    res.json({\n      success: true,\n      data: {\n        user: user.getPublicProfile()\n      }\n    });\n\n  } catch (error) {\n    console.error('Get profile error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Server error while fetching profile'\n    });\n  }\n});\n\n// @route   PUT /api/auth/profile\n// @desc    Update user profile\n// @access  Private\nrouter.put('/profile', [\n  auth,\n  body('firstName').optional().trim().isLength({ min: 2, max: 50 }).withMessage('First name must be between 2 and 50 characters'),\n  body('lastName').optional().trim().isLength({ min: 2, max: 50 }).withMessage('Last name must be between 2 and 50 characters'),\n  body('phone').optional().matches(/^\\+?[\\d\\s\\-\\(\\)]+$/).withMessage('Please provide a valid phone number'),\n  body('company').optional().trim().isLength({ max: 100 }).withMessage('Company name cannot exceed 100 characters')\n], async (req, res) => {\n  try {\n    // Check for validation errors\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        errors: errors.array()\n      });\n    }\n\n    const { firstName, lastName, phone, company } = req.body;\n\n    const user = await User.findById(req.user.userId);\n    if (!user) {\n      return res.status(404).json({\n        success: false,\n        message: 'User not found'\n      });\n    }\n\n    // Update fields\n    if (firstName) user.firstName = firstName;\n    if (lastName) user.lastName = lastName;\n    if (phone) user.phone = phone;\n    if (company) user.company = company;\n\n    await user.save();\n\n    res.json({\n      success: true,\n      message: 'Profile updated successfully',\n      data: {\n        user: user.getPublicProfile()\n      }\n    });\n\n  } catch (error) {\n    console.error('Profile update error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Server error while updating profile'\n    });\n  }\n});\n\n// @route   POST /api/auth/change-password\n// @desc    Change user password\n// @access  Private\nrouter.post('/change-password', [\n  auth,\n  body('currentPassword').notEmpty().withMessage('Current password is required'),\n  body('newPassword').isLength({ min: 8 }).withMessage('New password must be at least 8 characters long')\n], async (req, res) => {\n  try {\n    // Check for validation errors\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        errors: errors.array()\n      });\n    }\n\n    const { currentPassword, newPassword } = req.body;\n\n    const user = await User.findById(req.user.userId).select('+password');\n    if (!user) {\n      return res.status(404).json({\n        success: false,\n        message: 'User not found'\n      });\n    }\n\n    // Check current password\n    const isMatch = await user.comparePassword(currentPassword);\n    if (!isMatch) {\n      return res.status(400).json({\n        success: false,\n        message: 'Current password is incorrect'\n      });\n    }\n\n    // Update password\n    user.password = newPassword;\n    await user.save();\n\n    res.json({\n      success: true,\n      message: 'Password changed successfully'\n    });\n\n  } catch (error) {\n    console.error('Password change error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Server error while changing password'\n    });\n  }\n});\n\n// @route   POST /api/auth/forgot-password\n// @desc    Send password reset email\n// @access  Public\nrouter.post('/forgot-password', [\n  body('email').isEmail().normalizeEmail().withMessage('Please provide a valid email')\n], async (req, res) => {\n  try {\n    // Check for validation errors\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        errors: errors.array()\n      });\n    }\n\n    const { email } = req.body;\n\n    const user = await User.findOne({ email });\n    if (!user) {\n      // Don't reveal if user exists or not\n      return res.json({\n        success: true,\n        message: 'If an account with that email exists, a password reset link has been sent'\n      });\n    }\n\n    // Generate reset token (in a real app, you'd send this via email)\n    const resetToken = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n    user.resetPasswordToken = resetToken;\n    user.resetPasswordExpire = Date.now() + 3600000; // 1 hour\n    await user.save();\n\n    // TODO: Send email with reset link\n    console.log('Password reset token:', resetToken);\n\n    res.json({\n      success: true,\n      message: 'If an account with that email exists, a password reset link has been sent'\n    });\n\n  } catch (error) {\n    console.error('Forgot password error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Server error while processing password reset'\n    });\n  }\n});\n\n// @route   POST /api/auth/reset-password\n// @desc    Reset password with token\n// @access  Public\nrouter.post('/reset-password', [\n  body('token').notEmpty().withMessage('Reset token is required'),\n  body('newPassword').isLength({ min: 8 }).withMessage('New password must be at least 8 characters long')\n], async (req, res) => {\n  try {\n    // Check for validation errors\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        errors: errors.array()\n      });\n    }\n\n    const { token, newPassword } = req.body;\n\n    const user = await User.findOne({\n      resetPasswordToken: token,\n      resetPasswordExpire: { $gt: Date.now() }\n    });\n\n    if (!user) {\n      return res.status(400).json({\n        success: false,\n        message: 'Invalid or expired reset token'\n      });\n    }\n\n    // Update password and clear reset token\n    user.password = newPassword;\n    user.resetPasswordToken = undefined;\n    user.resetPasswordExpire = undefined;\n    await user.save();\n\n    res.json({\n      success: true,\n      message: 'Password reset successfully'\n    });\n\n  } catch (error) {\n    console.error('Reset password error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Server error while resetting password'\n    });\n  }\n});\n\n// @route   POST /api/auth/logout\n// @desc    Logout user (client-side token removal)\n// @access  Private\nrouter.post('/logout', auth, (req, res) => {\n  res.json({\n    success: true,\n    message: 'Logged out successfully'\n  });\n});\n\nmodule.exports = router;